---
description: 项目完整编码规范和开发约束
alwaysApply: true
---

## 编码规则

1. **中文日志** - 允许且尽量以中文字符串的方式打印日志
2. **中文回复** - Claude Code 的思考过程以及交互回复以中文为第一语言
3. **禁止注释** - 不要写任何的注释，Python 函数定义之后的那行注释也不要
4. **最简原则** - 代码保持极致的简洁，使用最极致的手动给出最短的函数实现，一定要去除冗余
5. **异常处理原则** - 如果没有百分百的确定一定需要加 try-catch 才能完成业务逻辑，则不加
6. **禁止修改 README** - 除非我明确说明，否则不允许擅自更改 Readme 文件
7. **禁止修改代码检查规则** - 不允许更改前端和后端的代码检查规则
8. **代码检查遵循** - 生成的代码需要先研究清楚前端和后端的代码检查规则
9. **无用代码清理** - 绝对不要添加没有被任何调用的空函数
10. **函数长度限制** - 后端函数不应该超过 200 行
11. **依赖注入** - 使用 dependency_injector 管理依赖
12. 工具函数是一个很好的实践，如果某一个服务独立不依赖别的服务注入情况下是不需要构造 Manager Class的, 遇到 tools 的需求先尝试 工具函数的做法，不行则变成规则11的做法
13. **数据库技术栈** - 数据库用的是PostgreSQL, ORM 工具是 tortoise-orm + aerich, 在任何情况下都不允许改变！！！
14. **禁止创建迁移文件** - 不允许你以任何方式创建 aerich 的 migrations 文件！！！
15. **字段类型规范** - 数据库表的 string 字段类型用 text，而非限定长度的char
16. **异步处理** - 尤其要注意 Python 项目中异步函数是否阻塞调用的问题，一定要正确使用异步I/O操作
17. **同步异步平衡** - 不能后端项目全是异步，项目启动时读配置，使用同步是非常合理，当然异步也行
18. **线程安全** - 业务逻辑中的同步代码，别放 main thread！，时刻关注后端事件循环的阻塞状态
19. **API 设计** - 后端接口rest api 只用 post 和 get 两个状态, 删除行为只做软删除
20. **异常处理** - 异常处理时，不做显式的 404 状态的检查和转换，直接弹出
21. **静态字符管理** - 写到日志里面的静态字符串不用你管，但是后端涉及逻辑的静态字符需要抽到一个 Enum 下，且只能使用英文，特别要注意 webscoket 里面的返回的需要被打印到前端的静态字符串，必须全英文
22. **日志规范** - 后端 logger.debug 等级的日志不允许提交
23. **界面文字** - 前端界面上的文字全是英文，但是后端的返回文字无限制
24. **工具库使用** - 前端使用 lodash 作为基本工作库，要始终尽可能的使用 lodash
25. **样式一致性** - 前端尽量多使用一点 globals.css 里面的自定义的颜色，使得整体页面的感觉一致
26. **配置文件规范** - 配置文件是env.dev, env.test, env.prod, 不要试图新建别的！
27. **环境变量管理** - 新增环境变量的时候，每个环境的文件都需要加上
28. **依赖管理** - 安装前后端依赖的时候默认安装最新版本的
29. **测试目录** - 测试加到对应项目的 test/路径下
30. **常量管理** - constants.py 是放常量的
31. **Prompts 管理** - Prompts 要以英文格式写到项目里，以独立的文件实现
32. **DTO 结构** - routes 里的一些 dto 定义应该在 utils/dto 路径下
33. **禁止自动调用快捷指令** - 不允许非人工的自动的调用快捷指令
34. 提供工具文件的时候，提供工具函数即可，不需要封装到一个类里面
35. 前端字体默认是黑色
36. 不要试图给模型兜底，你应该尽可能把需求写到 Prompt 的 yaml 文件里，也应该从 yaml 文件里读出输入输出格式



## 快捷指令

pp
1. 第1步，跳过。
2. 第2步，去除当前改动中的所有注释。
3. 第3步，检查当前的改动是否都符合本文件包含的所有规则的限制，每个规则都要检查是否适用
4. 第4步，触发 lint 检查
5. 第5步，修复所有lint问题，创建一个新的 commit 上去，绝对不允许使用--no-verify选项跳过代码检查
6. 提交