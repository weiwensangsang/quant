---
description: 帮助开发和优化量化交易策略，包括技术指标、信号生成和风险管理
globs:
alwaysApply: false
---

# 量化策略开发指南

## 策略基类模板
```python
from abc import ABC, abstractmethod
from typing import Dict, List, Optional
import pandas as pd
import numpy as np

class BaseStrategy(ABC):
    """所有策略的基类"""
    
    def __init__(self, params: Dict):
        self.params = params
        self.positions = {}
        self.signals = []
        
    @abstractmethod
    def generate_signals(self, data: pd.DataFrame) -> pd.Series:
        """生成交易信号"""
        pass
        
    @abstractmethod
    def calculate_position_size(self, signal: float, price: float) -> float:
        """计算仓位大小"""
        pass
        
    def risk_management(self, position: float, current_price: float) -> float:
        """风险管理逻辑"""
        # 实现止损、止盈、仓位调整等
        pass
```

## 常用技术指标实现
- 移动平均线 (MA, EMA)
- 布林带 (Bollinger Bands)
- RSI (相对强弱指标)
- MACD (移动平均收敛背离)
- ATR (真实波幅)
- 成交量加权平均价 (VWAP)

## 信号生成原则
- 信号必须明确：1 (买入), 0 (持有), -1 (卖出)
- 避免频繁交易，设置最小持仓时间
- 考虑信号的置信度和强度
- 实现信号过滤和确认机制

## 策略优化方法
```python
# 参数优化框架
def optimize_strategy(strategy_class, param_grid, data):
    """网格搜索优化策略参数"""
    results = []
    for params in param_grid:
        strategy = strategy_class(params)
        performance = backtest(strategy, data)
        results.append({
            'params': params,
            'sharpe': performance['sharpe_ratio'],
            'return': performance['total_return']
        })
    return pd.DataFrame(results)
```

## 多因子策略框架
- 因子标准化和去极值
- 因子相关性分析
- 因子权重分配
- 因子组合优化

## 机器学习策略
- 特征工程：技术指标、价格模式、市场微观结构
- 模型选择：XGBoost, LightGBM, LSTM
- 训练集划分：时间序列交叉验证
- 防止过拟合：正则化、早停、集成学习